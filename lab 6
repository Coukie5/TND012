/*
 * =============================================================
 * TND012: lab 6
 * Authors:
 * =============================================================
 */

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <format>

// Define new data type Date
struct Date {
    int year = 0;
    int month = 0;
    int day = 0;
};

// Define new data type Product_sale
struct Product_sale {
    std::string code;
    Date date; 
    //std::string units_sold = "";
    int units_sold = 0;
};


/* ************************************** */

// Read a date from stream is
Date read_date(std::ifstream& is);

// Read a product sale from stream is
Product_sale read_sale(std::ifstream& is);

// Define read_sales_file function
std::vector<Product_sale> read_sales_file(std::ifstream& is);


// ADD other functions
// Write date d to stream os
void write_date(std::ofstream& os, const Date& d);

// Write a product sale p to stream os
void write_sale(std::ofstream& os, const Product_sale& p);

void write_sales_file(std::ofstream& os, const std::vector<Product_sale>& V,const int k);

void sort_files(std::vector<Product_sale>& sales,const int& k);

bool compare_date(const Date& e, const Date& f);

bool is_date_equal(const Date& e, const Date& f);

bool compare_code(const std::vector<Product_sale>& V, int counter, const std::string & code);


/* ************************************** */

int main() {
    std::cout << "Enter k: ";
    int k;
    std::cin >> k;

    std::string path = "C:/Users/felix/TND012/lab6/code/"; // Replace this path, if needed

    std::cout << "Enter name of product sales file: ";
    std::string input_file_name;
    std::cin >> input_file_name;
    std::ifstream sales_file(path + input_file_name);

    std::cout << "Enter name of top-k sales file: ";
    std::string output_file_name;
    std::cin >> output_file_name;
    std::ofstream top_sold_file(path + output_file_name);

    if (!sales_file || !top_sold_file) {
        std::cout << "File error!!\n";
        return 0;
    }

    std::vector<Product_sale> sales;

    if (sales_file) {
        sales = read_sales_file(sales_file);
    }
    else {
        std::cout << "Couldn't read file";
        return 0;
    }

    sort_files(sales, k);

    write_sales_file(top_sold_file, sales, k);
   
}

/* ************************************** */

Date read_date(std::ifstream& is) {
    Date d;
    char dash = '-';
    is >> d.year >> dash >> d.month >> dash >> d.day;
    return d;
}


Product_sale read_sale(std::ifstream& is) {
    Product_sale sale;

    is >> std::ws;
    std::getline(is, sale.code);
    sale.date = read_date(is);
    is >> sale.units_sold;

    return sale;
}

std::vector<Product_sale> read_sales_file(std::ifstream& is) {
    std::vector<Product_sale> V;
    Product_sale sale = read_sale(is);
    while (is) {
        V.push_back(sale);
        sale = read_sale(is);
    }
    return V;
}

bool compare_date(const Date& e, const Date& f) {
    bool year = e.year < f.year;
    bool month = (e.year == f.year) && (e.month < f.month);
    bool day = (e.year == f.year) && (e.month == f.month) && (e.day < f.day);

    if (year || month || day) {
        return true;
    }
    else {
        return false;
    }
}

bool is_date_equal(const Date& e, const Date& f) {
    bool year = e.year == f.year;
    bool month = e.month == f.month;
    bool day = e.day == f.day;
    if (year && month && day) {
        return true;
    }
    else {
        return false;
    }

}

void sort_files(std::vector<Product_sale>& sales,const int& k) {
    for (int i = 0; i < sales.size(); i++) {
        for (int e = 0; e < (sales.size() - 1); e++) {
            if (sales[e].units_sold < sales[e + 1].units_sold) {
                std::swap(sales[e], sales[e + 1]);
            }
            else if (sales[e].units_sold == sales[e + 1].units_sold) {
                if (compare_date(sales[e].date, sales[e + 1].date)) {
                    std::swap(sales[e], sales[e + 1]);
                }
                else if (is_date_equal(sales[e].date, sales[e + 1].date)) {
                    if (sales[e].code > sales[e + 1].code) {
                        std::swap(sales[e], sales[e + 1]);
                    }
                }
            }
        }
    }
}



void write_date(std::ofstream& os, const Date& d) {
    os << std::format("{}-{:0>2}-{:0>2}\t", d.year, d.month, d.day);
}

void write_sale(std::ofstream& os, const Product_sale& p) {
    os << std::format("{}\t", p.code);
    write_date(os, p.date);
    os << std::format("{}", p.units_sold);
}

void write_sales_file(std::ofstream& os,const std::vector<Product_sale>& V, const int k) {

    os << std::format(" {:15} {:12} {:10}\n", "Code", "Date", "Units sold");

    for (int i = 0; i < k && i < V.size() ; i++) {
        write_sale(os, V[i]);

        if (compare_code(V, i, V[i].code)) {
            os << "^^" << "\n";
        }
        else {
            os << "\n";
        }
    }
}

bool compare_code(const std::vector<Product_sale>& V, int counter, const std::string& code) {

    for (int i = 0; i < counter; i++) {
        if (V[i].code == code) {
            return true;
        }
        else {
            return false;
        }
    }
}
